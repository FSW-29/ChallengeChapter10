import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { loginUser, loginWithGoogle } from "@/redux/actions/auth.action";
import { useRouter } from "next/router";
import Link from "next/link";
import Head from "next/head";
import {
  getAuth,
  GoogleAuthProvider,
  signInWithPopup,
} from "firebase/auth";
import firebase from "@/services/firebase";
import NavbarAuthComponent from "@/components/NavbarAuthComponent";

const Login = () => {
  // > state
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [apiKeyLoginGoogle, setApiKeyLoginGoogle] = useState('');

  // > data yang akan dikirim saat login
  const dataUser = {
    email: email,
    password: password
  };

  // > router
  const router = useRouter();

  // > hooks untuk cek user sudah login atau belum
  useEffect(() => {
    const checkAccessToken = () => {
      if (localStorage.getItem('token')) {
        router.push('/');
      }
    };
    checkAccessToken();
  }, [router]);

  // > dispatch
  const dispatch = useDispatch();
  // > selecttor loginUserFulfilled
  const {
    loginUserLoading,
    loginUserFulfilled,
    loginUserRejected,
    loginWithGooleLoading,
    loginWithGoogleFulfilled
  } = useSelector((state) =>  state.authReducer);
  // console.info(loginUserFulfilled, 'login berhasil');
  // console.info(loginUserFulfilled.data, 'kondisi fulfilled');
  // console.info(loginWithGoogleFulfilled, '=> data login with google');
  // console.info(loginUserRejected, '=> login gagal');

  // > buat api key
  // if (loginUserFulfilled.apiKey != "" && loginUserFulfilled.apiKey != null && typeof loginUserFulfilled.apiKey != 'undefined' && apiKey == ''){
  //   setApiKey(loginUserFulfilled.apiKey)
  //   localStorage.setItem("token", loginUserFulfilled.apiKey);
  // }
  if (
    loginUserFulfilled.apiKey != "" &&
    loginUserFulfilled.apiKey != null &&
    typeof loginUserFulfilled.apiKey != 'undefined' &&
    apiKey == ''
  ) {
    setApiKey(loginUserFulfilled.apiKey);
    localStorage.setItem("token", loginUserFulfilled.apiKey);
    localStorage.setItem("dataUser", JSON.stringify(loginUserFulfilled.profile));
    router.push('/home');
  }
  // > buat api key jika login dengan google
  if (loginWithGoogleFulfilled.data != "" && loginWithGoogleFulfilled.data != null && typeof loginWithGoogleFulfilled.data != 'undefined' && apiKeyLoginGoogle == ''){
    setApiKeyLoginGoogle(loginWithGoogleFulfilled.data.id)
    localStorage.setItem("token", loginWithGoogleFulfilled.data.id);
    localStorage.setItem("dataUserGoogle", JSON.stringify(loginWithGoogleFulfilled.data));
  }

  const handleLogin = async (event) => {
    event.preventDefault();

    // > cek inputan user
    // > Cek inputan user
    if (!email || !password) {
      return alert("Email and password cannot be empty!");
    }

    // console.info(email, password, '=> data login');
    
    await dispatch(loginUser(dataUser));

    // setEmail('');
    // setPassword('');

    // alert('Login Success');

    // console.log(apiKey, "adrian hehe")
    // router.push('/');

    console.log(loginUserRejected)
    if (loginUserRejected === true || apiKey !== "") {
      // alert('Check again your email and password');
      setApiKey("");
      localStorage.setItem("token", ""); 
      // router.replace('/login');
    } else if (
      loginUserFulfilled &&
      !loginUserLoading &&
      loginUserFulfilled !== false &&
      !loginUserRejected &&
      loginUserRejected !== true
    ) {
      // Login berhasil, melakukan pengalihan halaman
      alert('Login Berhasil');
      console.log(apiKey, "adrian hehe");
      router.replace('/home');
    }

    setEmail('');
    setPassword('');
  };

  const loginSSO = async () => {
    const auth = getAuth(firebase);
    const provider = new GoogleAuthProvider();
    const loginResult = await signInWithPopup(auth, provider);
    // const idUser = loginResult._tokenResponse.localId;
    // console.info(idUser);
    // console.info(loginResult._tokenResponse.displayName, 'namaku ini');
    // console.info(loginResult._tokenResponse.email, 'emailku ini');
    // console.info(loginResult._tokenResponse, 'dataku ini');


    await dispatch(loginWithGoogle(loginResult._tokenResponse));
    alert('Login Success');
    router.push('/home');
  };

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavbarAuthComponent />
      <section className="h-100 bg-dark">
        <div className="container py-5 h-100">
          <div className="row d-flex justify-content-center align-items-center h-100">
            <div className="col">
              <div className="card card-registration my-4">
                <div className="row g-0">
                  <div className="col-xl-6 d-none d-xl-block">
                    <img
                      src="https://images.unsplash.com/photo-1542549237432-a176cb9d5e5e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=814&q=80"
                      alt="Sample photo"
                      className="img-fluid"
                      style={{
                        borderTopLeftRadius: ".25rem",
                        borderBottomLeftRadius: ".25rem"
                      }}
                    />
                  </div>
                  <div className="col-xl-6 justify-content-center align-items-center">
                    <div className="card-body p-md-5 text-black">
                      <h3 className="mb-5 text-uppercase text-center">
                        Login
                      </h3>
                      {
                        loginUserRejected  ? (
                          <div className="alert alert-danger alert-dismissible fade show" role="alert">
                            <p>Check Again Email or Password</p>
                          </div>
                        ) : ""
                      }
                      <form onSubmit={handleLogin}>
                        <div className="mb-3">
                          <label htmlFor="email" className="form-label">
                            Email Address
                          </label>
                          <input
                            name="email"
                            type="email"
                            className="form-control"
                            id="email"
                            placeholder="Your Email Address"
                            onChange={ (e) => setEmail(e.target.value) }
                          />
                        </div>
                        <div className="mb-3">
                          <label htmlFor="password" className="form-label">
                            Password
                          </label>
                          <input
                            name="password"
                            type="password"
                            className="form-control"
                            id="password"
                            placeholder="Your Password"
                            onChange={ (e) => setPassword(e.target.value) }
                          />
                        </div>
                        <div className="d-grid gap-2 mt-2">
                          <button type="submit" className="btn btn-primary">
                            {
                              loginUserLoading ? 'Login on Process....' : 'Login'
                            }
                          </button>
                          <Link
                            href={ "/register" }
                            className="btn btn-success"
                            target="__blank"
                          >
                            Dont Have Account? Signup Here
                          </Link>
                        </div>
                        <div className="or my-3 text-center">
                          <p style={{ fontSize: "14px", fontWeight: "lighter" }}>Or</p>
                        </div>
                        <div className="d-grid gap-2 mt-3">
                          <p className="btn btn-secondary" onClick={ loginSSO }>
                            {
                              loginWithGooleLoading ? 'Login on Process' : 'Login Using Google!'
                            }
                          </p>
                        </div>
                        <div className="d-grid gap-2 my-3">
                          <hr />
                          <Link
                            href={ "/reset-password" }
                            className="text-decoration-none text-center text-black"
                          >
                            Forgot the Password? Press Here
                          </Link>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
}

export default Login;
